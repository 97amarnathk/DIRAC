#!/usr/bin/env python
##############################################################################################################################
# Generated by JobAgent version: %s for Job %s on %s.
##############################################################################################################################

import os, sys

def execute (arguments):
  from DIRAC.WorkloadManagementSystem.JobWrapper.JobWrapper   import JobWrapper
  from DIRAC.Core.DISET.RPCClient                             import RPCClient
  from DIRAC                                                  import S_OK, S_ERROR, gConfig, gLogger
#  from DIRAC.Utility.RequestDB                                 import setRequestStatus

  os.environ['JOBID']        = arguments['Job']['JobID']

  if arguments.has_key('WorkingDirectory'):
    wdir = os.path.expandvars(arguments['WorkingDirectory'])
    if os.path.isdir(wdir):
      os.chdir(wdir)
    else:
      os.makedirs(wdir)
      if os.path.isdir(wdir):
        os.chdir(wdir)

  jobID = arguments['Job']['JobID']
  root = arguments['CE']['Root']

  try:
    job = JobWrapper(mode,JobId)
    job.initialize(arguments)

  except Exception, x:

    message = 'Job failed the initialization phase with exception: \n '+str(x)
    gLogger.warn(message)

    jobReceiver  = RPCClient('WorkloadManagement/JobReceiver')
    jobReport  = RPCClient('WorkloadManagement/JobStateUpdate')

    jobParam = jobReport.setJobParameter(jobID,'Error Message',message)
    if not jobParam['OK']:
      gLogger.warn(jobParam)

    jobStatus = jobReport.setJobStatus(jobID,'Failed','ReschedulingJob','JobWrapperTemplate')
    if not jobStatus['OK']:
      gLogger.warn(jobStatus['Message'])
    #setRequestStatus('jdl',str(JobId)+'.jdl','Error')

    gLogger.info('Job will be rescheduled after exception during initialization of the Job Wrapper')
    result = jobReceiver.rescheduleJob(jobID)
    if not result['OK']:
      gLogger.warn(result)

    return

  try:
    job.main(arguments)

  except Exception, x:

    if str(x) == '0':
      gLogger.debug('Job wrapper exited with status=0 after execution')
      pass
    else:
      message = 'Job failed the main phase: \n'+str(x)
      gLogger.error(message)
      jobReceiver  = RPCClient('WorkloadManagement/JobReceiver')
      jobReport  = RPCClient('WorkloadManagement/JobStateUpdate')

      jobParam = jobReport.setJobParameter(jobID,'Error Message',message)
      if not jobParam['OK']:
        gLogger.warn(jobParam)

      jobStatus = jobReport.setJobStatus(jobID,'Failed','Rescheduling Job','JobWrapperTemplate')
      if not jobStatus['OK']:
        gLogger.warn(jobStatus['Message'])
      #setRequestStatus('jdl',str(JobId)+'.jdl','Error')

      gLogger.info('Job will be rescheduled after exception in the main phase of the Job Wrapper')
      result = jobReceiver.rescheduleJob(jobID)
      if not result['OK']:
        gLogger.warn(result)

      return

###################### Note ##############################
# The below arguments are automatically generated by the #
# JobAgent, do not edit them.                            #
##########################################################