import sys
%s
from DIRAC.Core.Base import Script
Script.parseCommandLine()
##############################################################################################################################
# $Id: JobWrapperTemplate,v 1.13 2008/06/05 14:09:29 paterson Exp $
# Generated by JobAgent version: %s for Job %s on %s.
##############################################################################################################################

from DIRAC.WorkloadManagementSystem.JobWrapper.JobWrapper   import JobWrapper
from DIRAC.Core.DISET.RPCClient                             import RPCClient
from DIRAC                                                  import S_OK, S_ERROR, gConfig, gLogger

import os

class JobWrapperError(Exception):
  def __init__(self, value):
    self.value = value
  def __str__(self):
    return str(self.value)

def rescheduleFailedJob(jobID,message):

    gLogger.warn(message)

    jobManager  = RPCClient('WorkloadManagement/JobManager')
    jobReport  = RPCClient('WorkloadManagement/JobStateUpdate')

    # FIXME: this Parameter/Status should be set by the JobManager upon receival of reschedule request
    # Why do we need to connect more than once
    jobParam = jobReport.setJobParameter(int(jobID),'Error Message',message)
    if not jobParam['OK']:
      gLogger.warn(jobParam)

    jobStatus = jobReport.setJobStatus(int(jobID),'Failed','ReschedulingJob','JobWrapperTemplate')
    if not jobStatus['OK']:
      gLogger.warn(jobStatus['Message'])

    gLogger.info('Job will be rescheduled after exception during execution of the JobWrapper')
    result = jobManager.rescheduleJob(int(jobID))
    if not result['OK']:
      gLogger.warn(result)

    return

def execute (arguments):

  jobID = arguments['Job']['JobID']
  # FIXME: why is the enviromental variable necesary???
  os.environ['JOBID'] = jobID

  # FIXME: What to do if WorkingDirectory can not be created? run locally?
  if arguments.has_key('WorkingDirectory'):
    wdir = os.path.expandvars(arguments['WorkingDirectory'])
    if os.path.isdir(wdir):
      os.chdir(wdir)
    else:
      os.makedirs(wdir)
      if os.path.isdir(wdir):
        os.chdir(wdir)

  jobID = arguments['Job']['JobID']
  root = arguments['CE']['Root']

  try:
    job = JobWrapper(jobID)
    job.initialize(arguments)
  except Exception, x:
    message = 'JobWrapper failed the initialization phase with exception: \n '+str(x)
    rescheduleFailedJob(jobID,message)
    job.sendWMSAccounting('Failed','Job Wrapper Initialization')
    return

  if arguments['Job'].has_key('InputSandbox'):
    try:
      result = job.transferInputSandbox(arguments['Job']['InputSandbox'])
      if not result['OK']:
        gLogger.warn(result['Message'])
        raise JobWrapperError(result['Message'])
    except Exception, x:
      message = 'JobWrapper failed to download input sandbox with exception: \n '+str(x)
      rescheduleFailedJob(jobID,message)
      job.sendWMSAccounting('Failed','Input Sandbox Download')
      return
  else:
    gLogger.verbose('Job has no InputSandbox requirement')

  if arguments['Job'].has_key('InputData'):
    if arguments['Job']['InputData']:
      try:
        result = job.resolveInputData(arguments)
        if not result['OK']:
          gLogger.warn(result['Message'])
          raise JobWrapperError(result['Message'])
      except Exception, x:
        message = 'JobWrapper failed to resolve input data with exception: \n '+str(x)
        rescheduleFailedJob(jobID,message)
        job.sendWMSAccounting('Failed','Input Data Resolution')
        return
    else:
      gLogger.verbose('Job has a null InputData requirement:')
      gLogger.verbose(arguments)
  else:
    gLogger.verbose('Job has no InputData requirement')

  try:
    result = job.execute(arguments)
    if not result['OK']:
      gLogger.warn(result['Message'])
      raise JobWrapperError(result['Message'])
  except Exception, x:
    if str(x) == '0':
      gLogger.verbose('JobWrapper exited with status=0 after execution')
      pass
    else:
      message = 'Job failed in execution phase with exception: \n'+str(x)
      rescheduleFailedJob(jobID,message)
      job.sendWMSAccounting('Failed','Exception During Execution')
      return

  if arguments['Job'].has_key('OutputSandbox') or arguments['Job'].has_key('OutputData'):
    try:
      result = job.processJobOutputs(arguments)
      if not result['OK']:
        gLogger.warn(result['Message'])
        raise JobWrapperError(result['Message'])
    except Exception, x:
      message = 'JobWrapper failed to process output files with exception: \n '+str(x)
      gLogger.warn(message)
      job.sendWMSAccounting('Failed','Output Data Upload')
      return
  else:
    gLogger.verbose('Job has no OutputData or OutputSandbox requirement')

  try:
    job.finalize(arguments)
  except Exception, x:
    message = 'JobWrapper failed the finalization phase with exception: \n '+str(x)
    gLogger.warn(message)
    return

###################### Note ##############################
# The below arguments are automatically generated by the #
# JobAgent, do not edit them.                            #
##########################################################