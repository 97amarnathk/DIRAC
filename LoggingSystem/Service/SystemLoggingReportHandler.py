# $Header: /tmp/libdirac/tmp.stZoy15380/dirac/DIRAC3/DIRAC/LoggingSystem/Service/SystemLoggingReportHandler.py,v 1.2 2008/03/05 11:26:32 mseco Exp $
__RCSID__ = "$Id: SystemLoggingReportHandler.py,v 1.2 2008/03/05 11:26:32 mseco Exp $"
"""
SystemLoggingReportHandler produce the number that match certain criteria

    The following methods are available in the Service interface

    getMessagesReport()
    getGroups()
    getSites()
    getSystems()
    getSubSystems()
    getFixedTextStrings()
"""
from DIRAC import S_OK, S_ERROR, gConfig, gLogger
from DIRAC.Core.Utilities import Time
from DIRAC.Core.DISET.RequestHandler import RequestHandler
from DIRAC.LoggingSystem.private.Message import tupleToMessage
from DIRAC.LoggingSystem.DB.SystemLoggingDB import SystemLoggingDB

def initializeSystemLoggingReportHandler( serviceInfo ):

  global LogDB
  LogDB = SystemLoggingDB()
  return S_OK()


class SystemLoggingReportHandler( RequestHandler ):

  def __getMessagesReport( self, beginDate=None, endDate=None ):
    return LogDB.getCountMessages( beginDate, endDate )

  def __getSitesReport( self, beginDate=None, endDate=None ):
    retval = LogDB.getSites()
    if not retval['OK']: return retval
    sites = retval['Value']

    siteList = []
    for site in sites:
      retval = LogDB.getCountMessages({'SiteName': site[0]},
                                      beginDate, endDate )
      if not retval['OK']: return retval

      siteList.append( [ site[0], int( retval['Value'] ) ] )

    return S_OK( siteList )

  def __getGroupsReport( self, beginDate=None, endDate=None ):
    retval = LogDB.getGroups()
    if not retval['OK']: return retval
    groups = retval['Value']

    groupList = []
    for group in groups:
      retval = LogDB.getCountMessages( {'OwnerGroup': group[0]},
                                       beginDate, endDate )
      if not retval['OK']: return retval

      groupList.append( [ group[0], int( retval['Value'] ) ] )

    return S_OK( groupList )

  def __getSystemsReport( self, beginDate=None, endDate=None ):
    retval = LogDB.getSystems()
    if not retval['OK']: return retval
    systems=retval['Value']

    systemList=[]
    for system in systems:
      retval = LogDB.getCountMessages( {'SystemName': system[0]},
                                       beginDate, endDate )
      if not retval['OK']: return retval

      systemList.append( [ system[0], int( retval['Value'] ) ] )

    return S_OK( systemList )

  def __getSubSystemsReport( self, beginDate=None, endDate=None ):
    retval = LogDB.getSubSystems()
    if not retval['OK']: return retval
    subSystems = retval['Value']

    subSystemList = []
    for subSystem in subSystems:
      retval = LogDB.getCountMessages( {'SubSystemName': subSystem[0]},
                                       beginDate, endDate )
      if not retval['OK']: return retval

      subSystemList.append( [ subSystem[0], int( retval['Value'] ) ] )

    return S_OK( subSystemList )

  def __getFixedTextStringsReport( self, beginDate=None, endDate=None ):
    retval = LogDB.getFixedTextStrings()
    if not retval['OK']: return retval
    fixedTextStrings=retval['Value']

    fixedTextStringList=[]
    for fixedTextString in fixedTextStrings:
      retval = LogDB.getCountMessages( {'FixedTextString': fixedTextString[0]},
                                       beginDate, endDate )
      if not retval['OK']: return retval

      fixedTextStringList.append( [ fixedTextString[0],
                                    int( retval['Value'] ) ] )

    return S_OK( fixedTextStringList )
  
  #A normal exported function (begins with export_)

  types_getMessagesReport = []

  def export_getMessagesReport( self, beginDate=None, endDate=None ):
    """ returns the total number of messages generated between
        beginDate and endDate
    """
    return self.__getMessagesReport( beginDate, endDate )
    
  types_getSitesReport = []

  def export_getSitesReport( self, beginDate=None, endDate=None ):
    """ returns the number of messages generated by each site
        between beginDate and endDate 
    """
    return self.__getSitesReport( beginDate, endDate )

  types_getGroupsReport = []

  def export_getGroupsReport( self, beginDate=None, endDate=None ):
    """ reports the number of messages generated by each group
        between beginDate and endDate 
    """
    return self.__getGroupsReport( beginDate, endDate )

  types_getSystemsReport = []

  def export_getSystemsReport( self, beginDate=None, endDate=None ):
    """ reports the number of messages generated by each group
        between beginDate and endDate 
    """ 
    return self.__getSystemsReport( beginDate, endDate )

  types_getSubSystemsReport = []

  def export_getSubSystemsReport( self, beginDate=None, endDate=None ):
    """ reports the number of messages generated by each group
        between beginDate and endDate 
    """ 
    return self.__getSubSystemsReport( beginDate, endDate )

  types_getFixedTextStringsReport = []

  def export_getFixedTextStringsReport( self, beginDate=None, endDate=None ):
    """ reports the number of messages generated by each group
        between beginDate and endDate 
    """ 
    return self.__getFixedTextStringsReport( beginDate, endDate )
