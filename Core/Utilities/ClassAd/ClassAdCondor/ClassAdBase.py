# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _ClassAdBase
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class ClassAd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassAd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassAd, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ClassAdBase.delete_ClassAd
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _ClassAdBase.new_ClassAd(*args)
        try: self.this.append(this)
        except: self.this = this
    def insertExpression(*args): return _ClassAdBase.ClassAd_insertExpression(*args)
    def insertAttributeClassAd(*args): return _ClassAdBase.ClassAd_insertAttributeClassAd(*args)
    def insertAttributeInt(*args): return _ClassAdBase.ClassAd_insertAttributeInt(*args)
    def insertAttributeFloat(*args): return _ClassAdBase.ClassAd_insertAttributeFloat(*args)
    def insertAttributeBool(*args): return _ClassAdBase.ClassAd_insertAttributeBool(*args)
    def insertAttributeString(*args): return _ClassAdBase.ClassAd_insertAttributeString(*args)
    def get_expression(*args): return _ClassAdBase.ClassAd_get_expression(*args)
    def clear(*args): return _ClassAdBase.ClassAd_clear(*args)
    def deleteAttribute(*args): return _ClassAdBase.ClassAd_deleteAttribute(*args)
    def getExpressionString(*args): return _ClassAdBase.ClassAd_getExpressionString(*args)
    def getAttributeInt(*args): return _ClassAdBase.ClassAd_getAttributeInt(*args)
    def getAttributeFloat(*args): return _ClassAdBase.ClassAd_getAttributeFloat(*args)
    def getAttributeString(*args): return _ClassAdBase.ClassAd_getAttributeString(*args)
    def getAttributeBool(*args): return _ClassAdBase.ClassAd_getAttributeBool(*args)
    def update(*args): return _ClassAdBase.ClassAd_update(*args)
    def modify(*args): return _ClassAdBase.ClassAd_modify(*args)
    def copy(*args): return _ClassAdBase.ClassAd_copy(*args)
    def copyFrom(*args): return _ClassAdBase.ClassAd_copyFrom(*args)
    def sameAs(*args): return _ClassAdBase.ClassAd_sameAs(*args)
    def flatten(*args): return _ClassAdBase.ClassAd_flatten(*args)
    def asJDL(*args): return _ClassAdBase.ClassAd_asJDL(*args)
ClassAd_swigregister = _ClassAdBase.ClassAd_swigregister
ClassAd_swigregister(ClassAd)

class MatchClassAd(ClassAd):
    __swig_setmethods__ = {}
    for _s in [ClassAd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchClassAd, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassAd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatchClassAd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ClassAdBase.new_MatchClassAd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ClassAdBase.delete_MatchClassAd
    __del__ = lambda self : None;
    def initialize(*args): return _ClassAdBase.MatchClassAd_initialize(*args)
    def release(*args): return _ClassAdBase.MatchClassAd_release(*args)
MatchClassAd_swigregister = _ClassAdBase.MatchClassAd_swigregister
MatchClassAd_swigregister(MatchClassAd)



