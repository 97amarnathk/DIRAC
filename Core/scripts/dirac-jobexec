#!/usr/bin/env python
########################################################################
# $Id: dirac-jobexec,v 1.6 2008/05/13 21:17:20 atsareg Exp $
# File :   dirac-jobexec
# Author : Stuart Paterson
########################################################################
__RCSID__   = "$Id: dirac-jobexec,v 1.6 2008/05/13 21:17:20 atsareg Exp $"
__VERSION__ = "$Revision: 1.6 $"

""" The dirac-jobexec script is equipped to execute workflows that
    are specified via their XML description.  The main client of
    this script is the Job Wrapper.
"""

from DIRACEnvironment import DIRAC
from DIRAC.Core.Base import Script
Script.parseCommandLine()

from DIRAC.Core.Workflow.Parameter import *
from DIRAC.Core.Workflow.Module import *
from DIRAC.Core.Workflow.Step import *
from DIRAC.Core.Workflow.Workflow import *
from DIRAC.Core.Workflow.WorkflowReader import *
from DIRAC import S_OK, S_ERROR, gLogger
from DIRAC.WorkloadManagementSystem.Client.JobReport import JobReport

import os,os.path,sys

def jobexec(jobxml):
  jobfile = os.path.abspath(jobxml)
  if not os.path.exists(jobfile):
    gLogger.warn('Path to specified workflow %s does not exist' %(jobfile))
    sys.exit(1)
  workflow = fromXMLFile(jobfile)
  gLogger.verbose(workflow)
  code = workflow.createCode()
  gLogger.verbose(code)
  jobID = 0
  if os.environ.has_key('JOBID'):
    jobID = os.environ['JOBID']
  workflow.addTool('JobReport',JobReport(jobID))  
  result = workflow.execute()
  return result

positionalArgs = Script.getPositionalArgs()
if len( positionalArgs ) != 1:
  gLogger.debug('Positional arguments were %s' %(positionalArgs))
  DIRAC.abort( 1, "Must specify the Job XML file description" )

if os.environ.has_key('JOBID'):
  gLogger.info('JobID: %s' %(os.environ['JOBID']))

gLogger.info('PYTHONPATH:\n %s' %(sys.path))
result = jobexec(*positionalArgs)
if not result['OK']:
  gLogger.debug('Workflow execution finished with errors, exiting')
  sys.exit(1)
else:
  gLogger.debug('Workflow execution successful, exiting')
  sys.exit(0)